{"version":3,"sources":["components/Post/Post.module.css","getWeb3.js","components/Commercial/Bid.js","components/Commercial/Commercial.js","web3Context.js","components/Commercial/CommercialState.js","components/Navbar.js","signData.js","components/User/User.js","components/User/UserState.js","components/Post/PostUI.js","getPosts.js","components/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Bid","props","componentDidMount","eth","getBlock","block","getGas","priorityFee","maxGasPerTX","minPriceForCom","getMinPriceForCom","baseFeePerGas","bid","getPricePerGas","setUserBid","setcomCount","setState","axios","get","data","baseFee","MaxFee","handleInputChange","event","target","value","name","state","this","userBidPerCom","comCount","type","min","max","onChange","step","pattern","style","color","onClick","onSendCommercial","Component","Commercial","accounts","eveeContract","recipiantContract","uri","address","_address","contract_of_remote","parseInt","methods","acceptComercial","send","from","gasLimit","addToWhiteList","slaveAddress","setFlag","flag","placeholder","Web3Context","React","createContext","Web3Provider","Provider","Consumer","CommercialState","context","currentProvider","net","getId","networkId","Contract","Recipiant","abi","networks","Evee","contextType","Navbar","display","gap","justifyContent","to","ethUtil","require","sigUtil","paidPost","text","prev","account","post","signData","signer","deadline","Date","now","txData","encodeABI","sendAsync","method","params","jsonrpc","err","result","netId","msgParams","JSON","stringify","types","EIP712Domain","land","primaryType","domain","version","chainId","verifyingContract","message","sender","dir","error","alert","recovered","recoverTypedSignature","parse","sig","toChecksumAddress","signature","substring","r","s","v","reqMsg","res","User","handleUserSignFree","handleUserSignPaid","UserState","regex","RegExp","PostUI","isInitialMount","useRef","useState","finalImage","setFinalImage","finalImagePreview","setFinalImagePreview","inputEl","preview","setPreview","checkForLink","useCallback","body","setter","match","_","img","forEach","regExpResult","doesImageExist","then","isImage","fetch","blob","url","URL","createObjectURL","image","Image","src","push","handleOnRespondClick","id","_e","textBody","current","onload","onerror","useEffect","className","styles","postUI_main_wrapper","postUI_container","inline_block","length","post_img_wrapper","map","index","alt","width","freePost","alignItems","fontWeight","border","height","marginBlock","textArea","ref","classy_class","e","gridColumn","getPosts","eveeNFTContract","filter_for_posts","getPastEvents","filter","fromBlock","toBlock","events","posts_com","posts_msg","p","returnValues","urlLink","tokenURI","tokenId","call","obj","json","jsoni","external_url","posts","i","comIndex","find","NFTContract","Post","get_main_post","postId","shift","getsons","sons","getfatrhers","limit","_id","fathers","getposts","setPost","useParams","catch","App","detectEthereumProvider","EveeNFT","runExample","toUpperCase","contract","path","element","placeItems","justifyItems","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c488d2a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post_img_wrapper\":\"Post_post_img_wrapper__2i7Q5\",\"postUI_main_wrapper\":\"Post_postUI_main_wrapper__2CkPS\",\"postUI_container\":\"Post_postUI_container__aD-h0\",\"textArea\":\"Post_textArea__2XY1N\",\"classy_class\":\"Post_classy_class__3StiU\",\"inline_block\":\"Post_inline_block__2K6Mn\"};","import Web3 from 'web3'\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener('load', async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum)\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable()\r\n          // Accounts now exposed\r\n          resolve(web3)\r\n        } catch (error) {\r\n          reject(error)\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3\r\n        console.log('Injected web3 detected.')\r\n        resolve(web3)\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          'http://127.0.0.1:7545'\r\n        )\r\n        const web3 = new Web3(provider)\r\n        console.log('No web3 instance injected, using Local web3.')\r\n        resolve(web3)\r\n      }\r\n    })\r\n  })\r\n\r\nexport default getWeb3\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport class Bid extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      minPriceForCom: null,\r\n      bid: null,\r\n    }\r\n  }\r\n  componentDidMount = async () => {\r\n    const { web3 } = this.props\r\n    const block = await web3.eth.getBlock('pending')\r\n    const { priorityFee, maxGasPerTX } = await this.getGas()\r\n    const minPriceForCom = this.getMinPriceForCom(\r\n      block.baseFeePerGas,\r\n      priorityFee,\r\n      maxGasPerTX\r\n    )\r\n    const bid = this.getPricePerGas(\r\n      block.baseFeePerGas,\r\n      priorityFee,\r\n      minPriceForCom\r\n    )\r\n    this.props.setUserBid(bid)\r\n    this.props.setcomCount(1)\r\n    this.setState({ minPriceForCom, bid })\r\n  }\r\n  getGas = async () => {\r\n    try {\r\n      const priorityFee = await axios.get(\r\n        'http://localhost:5000/commercial/getMaxPriorityFeePerGas'\r\n      )\r\n      console.log(priorityFee.data)\r\n      const maxGasPerTX = await axios.get('http://localhost:5000/gasEstimation')\r\n      console.log('maxGasPerTX', maxGasPerTX.data)\r\n      return { priorityFee: priorityFee.data, maxGasPerTX: maxGasPerTX.data }\r\n    } catch (err) {\r\n      console.log('caught error: ', err)\r\n    }\r\n    //for testing just return hard coded and comment all above\r\n    // return 1500000000\r\n  }\r\n  getMinPriceForCom = (baseFee, priorityFee, maxGasPerTX) => {\r\n    const MaxFee = 2 * baseFee + priorityFee\r\n    return maxGasPerTX * MaxFee\r\n  }\r\n  getPricePerGas = (baseFee, priorityFee, minPriceForCom) => {\r\n    const MaxFee = 2 * baseFee + priorityFee\r\n    console.log(\r\n      'baseFee',\r\n      baseFee,\r\n      'priorityFee',\r\n      priorityFee,\r\n      'MaxFee',\r\n      MaxFee\r\n    )\r\n    return minPriceForCom * 1.3\r\n  }\r\n  handleInputChange = (event) => {\r\n    const target = event.target\r\n    const value = target.value\r\n    const name = target.name\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { bid, minPriceForCom } = this.state\r\n    const { userBidPerCom,comCount } = this.props\r\n    return bid && minPriceForCom && userBidPerCom ? (\r\n      <>\r\n        <div>choose bid:</div>\r\n        <p>normal bid: {bid}</p>\r\n        <p>min bid: {minPriceForCom}</p>\r\n        <div>\r\n          <p>per Com {userBidPerCom} wei</p>\r\n          <input\r\n            type=\"range\"\r\n            name=\"userBidPerCom\"\r\n            min={minPriceForCom}\r\n            value={userBidPerCom}\r\n            max={bid * 1.3}\r\n            onChange={this.props.handleInputChange}\r\n            step=\"1000000\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <input type=\"text\" pattern=\"[0-9]*\"\r\n              name=\"comCount\"\r\n              onChange={this.props.handleInputChange}\r\n              value={comCount} \r\n              />\r\n              \r\n              </div>\r\n              <p style={{ color: 'green' }}>Total {userBidPerCom*comCount} Wei</p>\r\n        <button type=\"button\" onClick={this.props.onSendCommercial}>\r\n          Send Commercial\r\n        </button>\r\n      </>\r\n    ) : null\r\n  }\r\n}\r\n\r\nexport default Bid\r\n","import React, { Component } from 'react'\r\nimport { Bid } from './Bid'\r\nexport class Commercial extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      uri: '',\r\n      address: '',\r\n      slaveAddress: '',\r\n      flag: false,\r\n      userBidPerCom: '',\r\n      comCount: '',\r\n    }\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target\r\n    const value = target.value\r\n    const name = target.name\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  onSendCommercial = async () => {\r\n    const { accounts, eveeContract, recipiantContract } = this.props\r\n    const { uri, address, userBidPerCom, comCount } = this.state\r\n    const contract_of_remote = await recipiantContract._address\r\n    console.log('BID', parseInt(userBidPerCom))\r\n    await eveeContract.methods\r\n      .acceptComercial(address, contract_of_remote, uri, comCount)\r\n      .send({ from: accounts[0], gasLimit: 6000000, value: parseInt(userBidPerCom) * parseInt(comCount)})\r\n\r\n    /* testing of no TXData code\r\n    await eveeContract.methods\r\n      .acceptComercial(address, contract_of_remote, uri)\r\n      .send({ from: accounts[0], gasLimit: 6000000, value: 90000000000000000 })\r\n    */\r\n  }\r\n  addToWhiteList = async () => {\r\n    const { accounts, eveeContract } = this.props\r\n    const { slaveAddress } = this.state\r\n    await eveeContract.methods\r\n      .addToWhiteList(slaveAddress)\r\n      .send({ from: accounts[0], gasLimit: 6000000 })\r\n  }\r\n  setFlag = () => {\r\n    this.setState({\r\n      flag: true,\r\n    })\r\n  }\r\n  setUserBid = (userBidPerCom) => {\r\n    this.setState({ userBidPerCom })\r\n  }\r\n  setcomCount = (comCount) => {\r\n    this.setState({ comCount })\r\n  }\r\n  render() {\r\n    const { uri, address, slaveAddress, flag, userBidPerCom, comCount } = this.state\r\n    const { web3 } = this.props\r\n    return (\r\n      <>\r\n        <div>\r\n          current commercial address :\r\n          0xf38232721553a3dfa5F7c0E473c6A439CD776038\r\n        </div>\r\n        <div>\r\n          <label>Slave address: </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"slaveAddress\"\r\n            value={slaveAddress}\r\n            placeholder=\"slaveAddress\"\r\n            onChange={this.handleInputChange}\r\n          />\r\n          <button onClick={this.addToWhiteList}>Add proxy to whitelist</button>\r\n        </div>\r\n        <div>\r\n          <label>address: </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"address\"\r\n            value={address}\r\n            placeholder=\"address\"\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>URI: </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"uri\"\r\n            value={uri}\r\n            placeholder=\"uri\"\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </div>\r\n        <button onClick={this.setFlag}>next...</button>\r\n\r\n        {flag && (\r\n          <Bid\r\n            web3={web3}\r\n            userBidPerCom={userBidPerCom}\r\n            comCount={comCount}\r\n            handleInputChange={this.handleInputChange}\r\n            setUserBid={this.setUserBid}\r\n            setcomCount={this.setcomCount}\r\n            onSendCommercial={this.onSendCommercial}\r\n          />\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Commercial\r\n","import React from 'react'\r\nconst Web3Context = React.createContext('no context')\r\nconst Web3Provider = Web3Context.Provider\r\nconst Web3Consumer = Web3Context.Consumer\r\n\r\nexport { Web3Provider, Web3Consumer }\r\nexport default Web3Context\r\n","import React, { Component } from 'react'\r\nimport { Commercial } from './Commercial'\r\nimport Web3Context from '../../web3Context'\r\nimport Evee from '../../contracts/Evee.json'\r\nimport Recipiant from '../../contracts/Recipiant.json'\r\n\r\nexport class CommercialState extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      web3: null,\r\n      accounts: null,\r\n      recipiantContract: null,\r\n      eveeContract: null,\r\n    }\r\n  }\r\n  static contextType = Web3Context\r\n  componentDidMount = async () => {\r\n    const { web3, currentProvider } = this.context\r\n    const accounts = await currentProvider.enable()\r\n    const networkId = await web3.eth.net.getId()\r\n    const recipiantContract = new web3.eth.Contract(\r\n      Recipiant.abi,\r\n      Recipiant.networks[networkId].address\r\n    )\r\n    const eveeContract = new web3.eth.Contract(\r\n      Evee.abi,\r\n      Evee.networks[networkId].address\r\n    )\r\n    this.setState({\r\n      accounts,\r\n      recipiantContract,\r\n      eveeContract,\r\n      web3,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { web3, accounts, recipiantContract, eveeContract } = this.state\r\n    return (\r\n      <>\r\n        <Commercial\r\n          web3={web3}\r\n          accounts={accounts}\r\n          recipiantContract={recipiantContract}\r\n          eveeContract={eveeContract}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nexport const Navbar = () => {\r\n  return (\r\n    <nav style={{ display: 'flex', gap: '1em', justifyContent: 'center' }}>\r\n      <Link to=\"/user\">\r\n        <button>User</button>\r\n      </Link>\r\n      <Link to=\"/com\">\r\n        <button>Commercial</button>\r\n      </Link>\r\n    </nav>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nconst ethUtil = require('ethereumjs-util')\r\nconst sigUtil = require('eth-sig-util')\r\n\r\n\r\nexport const paidPost= async (\r\n  text,\r\n  prev,\r\n  account,\r\n  recipiantContract,\r\n  currentProvider\r\n) => {\r\n  recipiantContract.methods.post(text, prev).send({ from: account, gasLimit: 6000000 })\r\n}\r\n\r\n\r\nexport const signData = async (\r\n  text,\r\n  prev,\r\n  account,\r\n  recipiantContract,\r\n  currentProvider\r\n) => {\r\n  const signer = account\r\n  const deadline = Date.now() + 100000\r\n  console.log('RECI', recipiantContract)\r\n  console.log(deadline)\r\n  const contract_of_remote = recipiantContract._address\r\n  console.log('contract_of_remote', contract_of_remote)\r\n  const txData = recipiantContract.methods.post(text, prev).encodeABI()\r\n\r\n  currentProvider.sendAsync(\r\n    {\r\n      method: 'net_version',\r\n      params: [],\r\n      jsonrpc: '2.0',\r\n    },\r\n    (err, result) => {\r\n      const netId = result.result\r\n      const chainID = 5\r\n      console.log('netId', netId)\r\n      const msgParams = JSON.stringify({\r\n        types: {\r\n          EIP712Domain: [\r\n            { name: 'name', type: 'string' },\r\n            { name: 'version', type: 'string' },\r\n            { name: 'chainId', type: 'uint256' },\r\n            { name: 'verifyingContract', type: 'address' },\r\n          ],\r\n          land: [\r\n            { name: 'txData', type: 'bytes' },\r\n            { name: 'sender', type: 'address' },\r\n            { name: 'deadline', type: 'uint' },\r\n          ],\r\n        },\r\n        //make sure to replace verifyingContract with address of deployed contract\r\n        primaryType: 'land',\r\n        domain: {\r\n          name: 'Evee',\r\n          version: '1',\r\n          chainId: chainID,\r\n          verifyingContract: contract_of_remote,\r\n        },\r\n        message: {\r\n          txData: txData,\r\n          sender: signer,\r\n          deadline: deadline,\r\n        },\r\n      })\r\n\r\n      const from = signer\r\n\r\n      console.log('CLICKED, SENDING PERSONAL SIGN REQ', 'from', from, msgParams)\r\n      const params = [from, msgParams]\r\n      console.dir(params)\r\n      const method = 'eth_signTypedData_v4'\r\n\r\n      currentProvider.sendAsync(\r\n        {\r\n          method,\r\n          params,\r\n          from,\r\n        },\r\n        async function (err, result) {\r\n          if (err) return console.dir(err)\r\n          if (result.error) {\r\n            alert(result.error.message)\r\n          }\r\n          if (result.error) return console.error('ERROR', result)\r\n          console.log('TYPED SIGNED:' + JSON.stringify(result.result))\r\n\r\n          const recovered = sigUtil.recoverTypedSignature({\r\n            data: JSON.parse(msgParams),\r\n            sig: result.result,\r\n          })\r\n\r\n          if (\r\n            ethUtil.toChecksumAddress(recovered) ===\r\n            ethUtil.toChecksumAddress(from)\r\n          ) {\r\n          } else {\r\n            alert(\r\n              'Failed to verify signer when comparing ' + result + ' to ' + from\r\n            )\r\n          }\r\n\r\n          //getting r s v from a signature\r\n          const signature = result.result.substring(2)\r\n          const r = '0x' + signature.substring(0, 64)\r\n          const s = '0x' + signature.substring(64, 128)\r\n          const v = parseInt(signature.substring(128, 130), 16)\r\n          console.log('r:', r)\r\n          console.log('s:', s)\r\n          console.log('v:', v)\r\n          console.log('result:', result)\r\n\r\n          const reqMsg = {\r\n            v,\r\n            r,\r\n            s,\r\n            signer,\r\n            contract_of_remote,\r\n            deadline,\r\n            txData,\r\n          }\r\n          try {\r\n            const res = await axios.post('http://localhost:5000/sig', reqMsg)\r\n            console.log('res: ', res)\r\n          } catch (err) {\r\n            console.log('err:', err)\r\n          }\r\n        }\r\n      )\r\n    }\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { signData } from '../../signData'\r\nimport { paidPost } from '../../signData'\r\n\r\nexport class User extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      text: '',\r\n      prev: '',\r\n    }\r\n  }\r\n  handleInputChange = (event) => {\r\n    const target = event.target\r\n    const value = target.value\r\n    const name = target.name\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n  handleUserSignFree = () => {\r\n    const { text, prev } = this.state\r\n    const { account, recipiantContract, currentProvider } = this.props\r\n    signData(text, prev, account, recipiantContract, currentProvider)\r\n  }\r\n   handleUserSignPaid = () => {\r\n    const { text, prev } = this.state\r\n    const { account, recipiantContract, currentProvider } = this.props\r\n    paidPost(text, prev, account, recipiantContract, currentProvider)\r\n  }\r\n  render() {\r\n    const { text, prev } = this.state\r\n    return (\r\n      <>\r\n        <textarea\r\n          type=\"text\"\r\n          name=\"text\"\r\n          value={text}\r\n          placeholder=\"text\"\r\n          onChange={this.handleInputChange}\r\n        />\r\n        <input\r\n          type=\"uint\"\r\n          name=\"prev\"\r\n          value={prev}\r\n          placeholder=\"prev\"\r\n          onChange={this.handleInputChange}\r\n        />\r\n        <button type=\"button\" onClick={() => this.handleUserSignFree()}>\r\n          Send a free post\r\n        </button>\r\n        <button type=\"button\" onClick={() => this.handleUserSignPaid()}>\r\n          Send a paid post\r\n        </button>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default User\r\n","import React, { Component } from 'react'\r\nimport Web3Context from '../../web3Context'\r\nimport Evee from '../../contracts/Evee.json'\r\nimport Recipiant from '../../contracts/Recipiant.json'\r\nimport { User } from './User'\r\nexport class UserState extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      account: null,\r\n      recipiantContract: null,\r\n      eveeContract: null,\r\n      web3: null,\r\n      currentProvider: null,\r\n    }\r\n  }\r\n  static contextType = Web3Context\r\n  componentDidMount = async () => {\r\n    const { web3, currentProvider } = this.context\r\n    const accounts = await currentProvider.enable()\r\n    const networkId = await web3.eth.net.getId()\r\n      console.log('networkId',networkId)\r\n\r\n      console.log('Recipiant.networks[networkId].address',Recipiant.networks[networkId].address)\r\n\r\n    const recipiantContract = new web3.eth.Contract(Recipiant.abi,Recipiant.networks[networkId].address)\r\n\r\n    const eveeContract = new web3.eth.Contract(Evee.abi, Evee.networks[networkId].address)\r\n\r\n\r\n    \r\n    this.setState({\r\n      account: accounts[0],\r\n      recipiantContract,\r\n      eveeContract,\r\n      web3,\r\n      currentProvider,\r\n    })\r\n  }\r\n  render() {\r\n    const { account, recipiantContract, eveeContract, web3, currentProvider } =\r\n      this.state\r\n    return (\r\n      <>\r\n        <User\r\n          account={account}\r\n          recipiantContract={recipiantContract}\r\n          eveeContract={eveeContract}\r\n          web3={web3}\r\n          currentProvider={currentProvider}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React, { useRef, useState, useEffect, useCallback } from 'react'\r\nimport { signData } from '../../signData'\r\nimport styles from './Post.module.css'\r\nconst regex = new RegExp(\r\n  /\\b(\\S+(?:png|jpe?g|gif|apng|avif|jfif|pjpeg|pjp|svg|webp|bmp|ico|cur|tif|tiff)\\S*)\\b/gim\r\n)\r\n// import { v4 as uuidv4 } from 'uuid'\r\nconst PostUI = (props) => {\r\n  const { currentProvider, recipiantContract, accounts, post } = props\r\n  const isInitialMount = useRef(true)\r\n  const [finalImage, setFinalImage] = useState([])\r\n  const [finalImagePreview, setFinalImagePreview] = useState([])\r\n  const inputEl = useRef('')\r\n  const [preview, setPreview] = useState(false)\r\n  const checkForLink = useCallback((body, setter) => {\r\n    let res = []\r\n    if (body) res = body.match(regex)\r\n    setter((_) => [])\r\n    if (res) {\r\n      const img = []\r\n      res.forEach((regExpResult) => {\r\n        doesImageExist(regExpResult).then((isImage) => {\r\n          if (isImage) {\r\n            fetch(regExpResult).then((res) => {\r\n              res\r\n                .blob()\r\n                .then((blob) => {\r\n                  const url = URL.createObjectURL(blob)\r\n                  const image = new Image()\r\n                  image.src = url\r\n                  img.push(image)\r\n                })\r\n                .then((_) => {\r\n                  setter((_) => [...img])\r\n                })\r\n            })\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  const handleOnRespondClick = async (id, _e) => {\r\n    const textBody = inputEl.current.value\r\n    await signData(\r\n      textBody,\r\n      id,\r\n      accounts[0],\r\n      recipiantContract,\r\n      currentProvider\r\n    )\r\n  }\r\n\r\n  const doesImageExist = (url) =>\r\n    new Promise((resolve) => {\r\n      const img = new Image()\r\n      img.src = url\r\n      img.onload = () => resolve(true)\r\n      img.onerror = () => resolve(false)\r\n    })\r\n  const onPreview = () => {\r\n    checkForLink(inputEl.current.value, setFinalImagePreview)\r\n  }\r\n  const checkboxChange = () => {\r\n    setPreview(!preview)\r\n  }\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false\r\n      checkForLink(post.body, setFinalImage)\r\n    } else {\r\n      // console.log(finalImage)\r\n      // console.log(preview)\r\n      // Your useEffect code here to be run on update\r\n    }\r\n  }, [finalImage, checkForLink, post.body, preview])\r\n  // const handleOnRespondRandomMsgClick = async (id, _e) => {\r\n  //   const uuid = uuidv4()\r\n  //   await signData(uuid, id, accounts[0], recipiantContract, currentProvider)\r\n  // }\r\n  return (\r\n    <main className={styles.postUI_main_wrapper}>\r\n      <div className={styles.postUI_container}>\r\n        <div className={styles.inline_block}>\r\n          <label>From :</label>\r\n          <span> {post.sender}</span>\r\n        </div>\r\n        <div className={styles.inline_block}>\r\n          <label>Id =</label> <span>{post.id}</span>\r\n          <label> Prev = </label>\r\n          <span> {post.prev}</span>\r\n        </div>\r\n        <div>\r\n          <label>msg body:</label>\r\n          <p> {post.body}</p>\r\n          {finalImage.length > 0 ? (\r\n            <div className={styles.post_img_wrapper}>\r\n              {finalImage.map((res, index) => (\r\n                <div key={index}>\r\n                  <img src={res.src} alt=\"img\" width=\"100px\"></img>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        {post.freePost ? (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <label> Commercial:</label>\r\n            <img\r\n              style={{\r\n                color: 'red',\r\n                fontWeight: 700,\r\n                border: '1px solid black',\r\n              }}\r\n              src={post.uri}\r\n              alt=\"commercial\"\r\n              height=\"100\"\r\n              width=\"200\"\r\n            />\r\n          </div>\r\n        ) : (\r\n          <label> no commercial</label>\r\n        )}\r\n      </div>\r\n      {/* <button\r\n          type=\"button\"\r\n          onClick={(e) => handleOnRespondRandomMsgClick(post.id, e)}\r\n        >\r\n          random msg to id:{post.id}\r\n        </button> */}\r\n      <div\r\n        style={{\r\n          display: 'grid',\r\n          marginBlock: '1em',\r\n          gap: '1em',\r\n          justifyContent: 'center',\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            gap: '1em',\r\n          }}\r\n        >\r\n          <textarea\r\n            className={styles.textArea}\r\n            ref={inputEl}\r\n            onChange={onPreview}\r\n            placeholder=\"MESSAGE\"\r\n          />\r\n          <div>\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"preview\"\r\n              name=\"preview\"\r\n              value={preview}\r\n              onChange={checkboxChange}\r\n            ></input>\r\n            <label>Preview</label>\r\n          </div>\r\n        </div>\r\n        <div style={{ display: 'grid' }}>\r\n          <button\r\n            className={styles.classy_class}\r\n            type=\"button\"\r\n            onClick={(e) => handleOnRespondClick(post.id, e)}\r\n          >\r\n            Comment on ID: {post.id}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {preview && (\r\n        <div style={{ gridColumn: '1 / span 2' }}>\r\n          <label>preview comment on ID: {post.id}</label>\r\n          <p> {inputEl.current.value}</p>\r\n          {finalImagePreview.length > 0 ? (\r\n            <div className={styles.post_img_wrapper}>\r\n              {finalImagePreview.map((res, index) => (\r\n                <div key={index} className={styles.post_img_wrapper}>\r\n                  <div>\r\n                    <img src={res.src} alt=\"img\" width=\"100px\"></img>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      )}\r\n    </main>\r\n  )\r\n}\r\nexport default PostUI\r\n","export default async function getPosts(\r\n  recipiantContract,\r\n  eveeNFTContract,\r\n  filter_for_posts\r\n) {\r\n  // get com post part\r\n  const posts_com = await recipiantContract.getPastEvents(\r\n    'post_com',\r\n    {\r\n      filter: filter_for_posts, // use prev : x to see all x's replies\r\n      fromBlock: 0,\r\n      toBlock: 'latest',\r\n    },\r\n    (error, events) => {\r\n      console.log('commercials: ', events)\r\n    }\r\n  )\r\n\r\n  // get msg post part\r\n  const posts_msg = await recipiantContract.getPastEvents(\r\n    'post_msg',\r\n    {\r\n      filter: filter_for_posts, // use prev : x to see all x's replies\r\n      fromBlock: 0,\r\n      toBlock: 'latest',\r\n    },\r\n    (error, events) => {\r\n      console.log('posts: ', events)\r\n    }\r\n  )\r\n\r\n  //get sommercial's uri of each post (its located in EveeNFT)\r\n  for (const p of posts_com) {\r\n    p.returnValues.urlLink = null\r\n    if (!p.returnValues.freePost) {\r\n      p.returnValues.uri = null\r\n    } else {\r\n      // try to extract metadata from uri, otherwise uri will be the the image\r\n      try {\r\n        p.returnValues.uri = await eveeNFTContract.methods\r\n          .tokenURI(p.returnValues.tokenId)\r\n          .call()\r\n        try {\r\n          const obj = await fetch(p.returnValues.uri)\r\n          // console.log('obj', obj)\r\n          const jsoni = await obj.json()\r\n          p.returnValues.uri = jsoni.image\r\n          // console.log('the json', jsoni)\r\n          p.returnValues.urlLink = jsoni.external_url\r\n        } catch (e) {\r\n          //console.log('something went wrong with meta data extraction', e)\r\n        }\r\n      } catch (e) {\r\n        //console.log('something went wrong with image of commercial', e)\r\n      }\r\n      //id 0's defulat commercial\r\n    }\r\n  }\r\n\r\n  const posts = []\r\n  for (let i = 0; i < posts_msg.length; i++) {\r\n    const comIndex = posts_com.find(\r\n      ({ returnValues }) => returnValues.id === posts_msg[i].returnValues.id\r\n    )\r\n    console.log('post ', posts_msg[i].returnValues.id, ' com ', comIndex)\r\n\r\n    posts[i] = {\r\n      id: posts_msg[i].returnValues.id,\r\n      prev: posts_msg[i].returnValues.prev,\r\n      body: posts_msg[i].returnValues.body,\r\n      sender: posts_msg[i].returnValues.sender,\r\n      NFTContract: comIndex.returnValues.NFTContract,\r\n      tokenId: comIndex.returnValues.tokenId,\r\n      uri: comIndex.returnValues.uri,\r\n      freePost: comIndex.returnValues.freePost,\r\n    }\r\n  }\r\n  console.log('posts ', posts)\r\n  return posts\r\n}\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport PostUI from './PostUI'\r\nimport getPosts from '../../getPosts'\r\n\r\nexport default function Post(props) {\r\n  const get_main_post = useCallback(\r\n    async (postId, eveeNFTContract, recipiantContract) => {\r\n      // const posts_com = (\r\n      //   await recipiantContract.getPastEvents('post_com', {\r\n      //     filter: {\r\n      //       id: postId,\r\n      //     }, // use prev : x to see all x's replies\r\n      //     fromBlock: 0,\r\n      //     toBlock: 'latest',\r\n      //   })\r\n      // ).shift()\r\n      // get msg post part\r\n      const posts_msg = (\r\n        await recipiantContract.getPastEvents('post_msg', {\r\n          filter: {\r\n            id: postId,\r\n          }, // use prev : x to see all x's replies\r\n          fromBlock: 0,\r\n          toBlock: 'latest',\r\n        })\r\n      ).shift()\r\n\r\n      //get sommercial's uri of each post (its located in EveeNFT)\r\n\r\n      // let uri\r\n      //normal post\r\n      //normal post\r\n      posts_msg.returnValues.urlLink = null\r\n      if (!posts_msg.returnValues.freePost) {\r\n        posts_msg.returnValues.uri = null\r\n      } else {\r\n        // try to extract metadata from uri, otherwise uri will be the the image\r\n        try {\r\n          posts_msg.returnValues.uri = await eveeNFTContract.methods\r\n            .tokenURI(posts_msg.returnValues.tokenId)\r\n            .call()\r\n          try {\r\n            const obj = await fetch(posts_msg.returnValues.uri)\r\n            // console.log('obj', obj)\r\n            const jsoni = await obj.json()\r\n            posts_msg.returnValues.uri = jsoni.image\r\n            // console.log('the json', jsoni)\r\n            posts_msg.returnValues.urlLink = jsoni.external_url\r\n          } catch (e) {\r\n            //console.log('something went wrong with meta data extraction', e)\r\n          }\r\n        } catch (e) {\r\n          //console.log('something went wrong with image of commercial', e)\r\n        }\r\n        //id 0's defulat commercial\r\n      }\r\n      return posts_msg\r\n    },\r\n    []\r\n  )\r\n\r\n  const getsons = useCallback(\r\n    async (postId, eveeNFTContract, recipiantContract) => {\r\n      let sons = await getPosts(recipiantContract, eveeNFTContract, {\r\n        prev: postId,\r\n      })\r\n      return sons\r\n    },\r\n    []\r\n  )\r\n\r\n  const getfatrhers = useCallback(\r\n    async (post, eveeNFTContract, recipiantContract, limit) => {\r\n      let _id = post.returnValues.prev\r\n      let fathers = []\r\n      if (post.returnValues.id !== '0') {\r\n        for (let i = 0; i < limit; i++) {\r\n          let posts = await getPosts(recipiantContract, eveeNFTContract, {\r\n            id: _id,\r\n          })\r\n          fathers.push(posts)\r\n          _id = posts[0].prev\r\n          if (_id === '0' && posts[0].id === '0') return fathers\r\n        }\r\n      } else {\r\n        return fathers\r\n      }\r\n    },\r\n    []\r\n  )\r\n\r\n  const getposts = useCallback(\r\n    async (postId, eveeNFTContract, recipiantContract) => {\r\n      // get main commercial\r\n      const posts_msg = await get_main_post(\r\n        postId,\r\n        eveeNFTContract,\r\n        recipiantContract\r\n      )\r\n      // get sons\r\n      const sons = await getsons(postId, eveeNFTContract, recipiantContract)\r\n      console.log('replies to ', postId, '     ', sons)\r\n      // get 3 fathers\r\n      const fathers = await getfatrhers(\r\n        posts_msg,\r\n        eveeNFTContract,\r\n        recipiantContract,\r\n        3\r\n      )\r\n      console.log('fathers', postId, '     ', fathers)\r\n      const { id, prev, body, sender, uri } = posts_msg.returnValues\r\n      const postToEnter = {\r\n        id,\r\n        prev,\r\n        body,\r\n        sender,\r\n        uri,\r\n      }\r\n      setPost(postToEnter)\r\n    },\r\n    [get_main_post, getfatrhers, getsons]\r\n  )\r\n\r\n  const { eveeNFTContract, recipiantContract, currentProvider, accounts } =\r\n    props\r\n  const [post, setPost] = useState(null)\r\n  const { postId } = useParams()\r\n  useEffect(() => {\r\n    getposts(postId, eveeNFTContract, recipiantContract).catch(console.error)\r\n  }, [\r\n    getposts,\r\n    postId,\r\n    eveeNFTContract,\r\n    recipiantContract,\r\n    currentProvider,\r\n    accounts,\r\n  ])\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'grid',\r\n        border: '3px solid yellow',\r\n      }}\r\n    >\r\n      {post && (\r\n        <PostUI\r\n          post={post}\r\n          currentProvider={currentProvider}\r\n          recipiantContract={recipiantContract}\r\n          accounts={accounts}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport getWeb3 from './getWeb3'\r\nimport Evee from './contracts/Evee.json'\r\nimport EveeNFT from './contracts/EveeNFT.json'\r\nimport Recipiant from './contracts/Recipiant.json'\r\nimport { Routes, Route } from 'react-router-dom'\r\nimport { CommercialState } from './components/Commercial/CommercialState'\r\nimport { Navbar } from './components/Navbar'\r\nimport { Web3Provider } from './web3Context'\r\nimport { UserState } from './components/User/UserState'\r\nimport detectEthereumProvider from '@metamask/detect-provider'\r\nimport Post from './components/Post/Post'\r\nimport Ring from '@bit/joshk.react-spinners-css.ring'\r\nimport PostUI from './components/Post/PostUI'\r\nimport getPosts from './getPosts'\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      web3: null,\r\n      accounts: null,\r\n      contract: null,\r\n      currentProvider: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    // Get network provider and web3 instance.\r\n    const currentProvider = await detectEthereumProvider()\r\n    const web3 = await getWeb3()\r\n    // Use web3 to get the user's accounts.\r\n    const accounts = await currentProvider.enable()\r\n\r\n    // Get the contract instance.\r\n    const networkId = await web3.eth.net.getId()\r\n    console.log('networkId', networkId)\r\n\r\n    console.log(\r\n      'Recipiant.networks[networkId].address',\r\n      Recipiant.networks[networkId].address\r\n    )\r\n\r\n    const recipiantContract = new web3.eth.Contract(\r\n      Recipiant.abi,\r\n      Recipiant.networks[networkId].address\r\n    )\r\n\r\n    const eveeContract = new web3.eth.Contract(\r\n      Evee.abi,\r\n      Evee.networks[networkId].address\r\n    )\r\n\r\n    const eveeNFTContract = new web3.eth.Contract(\r\n      EveeNFT.abi,\r\n      EveeNFT.networks[networkId].address\r\n    )\r\n\r\n    this.setState(\r\n      {\r\n        web3,\r\n        accounts,\r\n        recipiantContract,\r\n        eveeContract,\r\n        eveeNFTContract,\r\n        currentProvider,\r\n      },\r\n      this.runExample\r\n    )\r\n  }\r\n\r\n  runExample = () => {\r\n    const { accounts, recipiantContract, eveeNFTContract } = this.state\r\n    // Get the value from the contract to prove it worked.\r\n    console.log('accounts[0]', accounts[0].toUpperCase())\r\n\r\n    console.log('RES', recipiantContract)\r\n    // const changUriEvents = await eveeNFTContract.getPastEvents(\r\n    //   'ChangeUri',\r\n    //   {\r\n    //     filter: {}, // use prev : x to see all x's replies\r\n    //     fromBlock: 0,\r\n    //     toBlock: 'latest',\r\n    //   },\r\n    //   (error, events) => {\r\n    //     console.log(events)\r\n    //   }\r\n    // )\r\n    // changUriEvents.forEach((Elemnt) => console.log('changUriEvents', Elemnt))\r\n    getPosts(recipiantContract, eveeNFTContract, {}).then((posts) => {\r\n      console.log('posts', posts)\r\n      this.setState({ posts })\r\n    })\r\n\r\n    // Update state with the result.\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      web3,\r\n      posts,\r\n      currentProvider,\r\n      eveeNFTContract,\r\n      recipiantContract,\r\n      accounts,\r\n    } = this.state\r\n    if (!web3)\r\n      return <div>Loading Web3, accounts, and recipiantContract...</div>\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <h2>EVEE Free To Use BlockChain Social Media Example</h2>\r\n        <div>\r\n          <Web3Provider value={{ web3, currentProvider }}>\r\n            <Routes>\r\n              <Route path=\"user\" element={<UserState />} />\r\n              <Route path=\"com\" element={<CommercialState />} />\r\n              <Route\r\n                path=\"post/:postId\"\r\n                element={\r\n                  <Post\r\n                    recipiantContract={recipiantContract}\r\n                    eveeNFTContract={eveeNFTContract}\r\n                    currentProvider={currentProvider}\r\n                    accounts={accounts}\r\n                  />\r\n                }\r\n              />\r\n            </Routes>\r\n          </Web3Provider>\r\n        </div>\r\n        <>\r\n          {posts ? (\r\n            posts.map((post) => (\r\n              <PostUI\r\n                key={post.id}\r\n                post={post}\r\n                currentProvider={currentProvider}\r\n                recipiantContract={recipiantContract}\r\n                accounts={accounts}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div style={{ display: 'grid', placeItems: 'center' }}>\r\n              LOADING POSTS\r\n              <Ring color=\"#be97e8\" style={{ justifyItems: 'center' }} />\r\n            </div>\r\n          )}\r\n        </>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {  HashRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}